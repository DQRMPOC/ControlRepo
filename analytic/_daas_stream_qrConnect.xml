<analytic>
	<analytic>.daas.stream.qrConnect</analytic>
	<code_text>{[]
  /opening a handle to the QR
  .qr.info:: first select from .ex.prh(`.pl.getRunningInformation;::)  where name like "*qr*",not name like "ds_*";
  .qr.hostport:: hsym`$":" sv string .qr.info `ipaddress`port;
  .qr.handle:@[hopen;.qr.hostport;{0N!"opening DR QR connection";hopen .qr.DRhostport}];

 // define QR connect function &amp;amp; logic
  .qr.clientID:0Ng;
  .qr.gateways:([process:"s"$()] hostport:"s"$(); handle:"i"$(); validated:"b"$());
  .qr.requestOk:0b;
  .qr.requestCounter:-1i;
  .qr.heartbeatF:0i;
  .qr.log.normal:{[x;y;z]0N!y;-3!z};
  .qr.log.error:{0N!y;-3!z};

  // connect to QR
  .qr.connect:{[]
    .qr.log.normal[`QueryRouter; "Connecting to QR"; ()];
    neg[.qr.handle](`registerClient; string[`streamClient]; .qr.clientID; .qr.heartbeatF; 1b; string[first -1?0Ng]; `Administrator; "password");
  };

  .qr.connectGWs:{[]
    hn:@[hopen;;{0N!raze "failed to connect to QR ",string x}] each exec hostport from .qr.gateways where null handle;
        hn:@[hn;where -6&lt;&gt;type each hn;:;0ni];
    update handle:hn from `.qr.gateways where null handle;

    hn:hn where not null hn;
    { neg[x](`.qr.registerClient; .qr.clientID; .qr.heartbeatF; string[first -1?0Ng]) } each hn;
  };

  // define function to receive GW details
  .qr.gateway:{[myID; success; msg; gws; runID; master]
    if[not success;
      .qr.log.error[`QueryRouter; "Failed to register with QR"; (myID; msg; gws; runID)];
      :()
    ];
    .qr.log.normal[`QueryRouter; "Received status message from QR"; (myID; msg; gws; runID)];
    if[null .qr.clientID;
      .qr.clientID:myID;
      .qr.requestOk:1b;
    ];
    `.qr.gateways upsert gws;
    };

  // GW registration callback
  .qr.gwRegistered:{[gw; success; runID]
    `.qr.gateways upsert `process`validated!(gw; success);
  };
  // define function to receive status messages
  .qr.status:{[myID; msg; reqID; status]
    .qr.log.normal[`QueryRouter; "Received status message from QR"; (myID; msg; reqID; status)];
  };
  .qr.sendRequest:{[request; target; opts]
    opts,:enlist[`timeout]!enlist 1200;
    @[neg[.qr.handle];(`runRequest; request; target; string .qr.runCounter+:1; opts);{0N!"lost connection, connecting to alternate QR";.qr.connectDR[]}];
  };
  .qr.request:{[myID; status; msg; reqID; gw; runID; master]
    .qr.log.normal[`QueryRouter; "Request status received"; (myID; status; msg; reqID; gw; runID)];
    `.qr.results upsert `requestID`msg`status!(reqID; msg; $[status; `initialised; `failed]);
  };

  .qr.result:{[myID; rID; runID; status; msg; res]
    if[(status=`failed) | 10h=type res;
      .qr.log.error[`QueryRouter; "Request ID ",string[rID]," failed: ",-3!res; msg];
      `.qr.results upsert `requestID`msg`status!(rID; msg; `failed);
      :()
    ];
    .qr.log.normal[`QueryRouter; "Request ID ",string[rID]," successful: ",-3!res; msg];
    show res;
    .daas.stream.qrCallback[(get runID);res];
 };

  .qr.results:([requestID:"j"$()] runID:"j"$(); status:"s"$(); msg:(); result:());
  `.qr.results upsert `requestID`msg`result!(-1j; (::); (::));

  // send heartbeat to QR &amp; GWs
  .qr.sendHeartbeats:{[]
    if[not null .qr.handle;
      neg[.qr.handle](`.ch.heartbeat; `);
    ];
    {[h] neg[h](`.ch.heartbeat; `) } each exec handle from .qr.gateways where not null handle;
  };



// Define getTicks function in a standard way so that they can be called as if on the gateway
getTicks::{.qr.sendRequest[(`getTicks;x);(); ()]};


.qr.connect[];
.qr.connectGWs[];


}</code_text>
	<description></description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<analyticgroup>daasStream</analyticgroup>
</analytic>
