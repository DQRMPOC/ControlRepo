<analytic>
	<analytic>.daas.log.initQueryLogging</analytic>
	<code_text>{[daysInMem;logDir]
    .daas.gw.queryNum:1;
	.daas.log.replay:`.daas.queryLog upsert;

	// replay log files from the past week (these will be upserted to the eventRecords table)
	oldLogs:{` sv x, `$string[.ex.getInstanceName[]],"_", ssr[;".";"_"]string y}[logDir] each .z.D - til daysInMem;
	
	{@[-11!;x;{.log.out[.z.h;"Error reading event log file: ", string[x]; y]} x]} each oldLogs where not ()~/:key each oldLogs;
	`requestTime xasc `.daas.queryLog;
	if[count .daas.queryLog;
        .daas.gw.queryNum:1 + exec max requestNum from .daas.queryLog;
    ];
	
	// reconnect to today's logFile if it exists; otherwise create it
	.daas.log.logFile:first oldLogs;
	if[()~key .daas.log.logFile;.daas.log.logFile set ()];
	.daas.log.logh:hopen .daas.log.logFile;
 }</code_text>
	<description>sets up query logging on a gateway proc</description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>daysInMem</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Integer</datatype>
	</param>
	<param>
		<parameter>logDir</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Symbol</datatype>
	</param>
	<analyticgroup>daasLog</analyticgroup>
</analytic>
