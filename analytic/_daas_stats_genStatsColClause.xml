<analytic>
	<analytic>.daas.stats.genStatsColClause</analytic>
	<code_text>{[args]
    //if symbol type then it is a classic analytics parameter
    if[11=abs type args`analytics;

        //If we're generating buckets, then run regular genColClause
        :$[not args[`granularityUnit] in ``tick;
            .daas.util.genColClause[args];
            //If it's an interval then use map reduce col clauses
            null args[`granularityUnit];
                ((enlist`time)!enlist(first;args`time)),.daas.util.genMRCompColClause args;
                //Otherwise it's a tickStat agg
                .daas.util.genTicksStatsColClause[args]
            ]
        ];

    /if its an interval calc we need dummy time column
    toReturn:args`analytics;

    if[null args`granularityUnit;
      toReturn,:(enlist`time)!enlist(first;args`time);
    ];
    
    :toReturn;
 }</code_text>
	<description>Applies column aggregations for correct table when aggregating by interval.</description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>args</parameter>
		<default>
			<dictkey>
				<name>Key</name>
				<datatype>Symbol</datatype>
				<default></default>
				<isrequired>true</isrequired>
				<description></description>
			</dictkey>
		</default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Dict</datatype>
	</param>
	<analyticgroup>daasStats</analyticgroup>
</analytic>
