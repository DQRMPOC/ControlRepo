<analytic>
	<analytic>.daas.stream.firstUpd</analytic>
	<code_text>{[t;data;id]
/get streaming function params and prior table. filter newData on symList, mark that the data has arrived
params:.daas.stream.streamSubs[id;`params];
colClause:params`colClause;
$[t like "*Trade";tabname:`trade;tabname:`quote];
$[tabname=`trade;filter:$[(count raze params`applyFilter)&gt;1;$[any type each params`applyFilter;enlist params`applyFilter;params`applyFilter];()];filter:()];
$[tabname=`trade;.daas.stream.streamSubs[id;`params;`tradePassed]:1b;.daas.stream.streamSubs[id;`params;`quotePassed]:1b];
.log.out[.z.h;"got tabname";tabname];


newSyms:.daas.stream.streamSubs[id;`params;`symList];
.[`.daas.stream.streamTabs;(id;`newSyms); union; newSyms]; 
timeType:$[params[`time]=`insertTime;`time;`exchTime];
/get Cache data
cacheData:.daas.stream.streamCache[params[`symList];tabname];
$[0=count cacheData;
	cacheData:get string[t];
	cacheData:?[cacheData;enlist (within;timeType;(enlist;(`params;enlist`subTime);(`params;enlist`end)));0b;()]
    ];
newData:data,cacheData;
if[0=count newData;
	:()
	];

/if `daily=params`startType, we just track the new relevant syms and ditch the data
if[`daily=params`startType; :1b];
startTab:.daas.stream.streamTabs[id;`data];
newTab:?[newData;filter;(enlist`sym)!enlist`sym;(.daas.cfg.rtetableFunctionMap t)!.daas.cfg.rteAggregationFunctions .daas.cfg.rtetableFunctionMap t];


tab:startTab,'newTab;
/fill new sym records or mins and running sums so that later calcs work
tab:![tab;();0b;(.daas.summary.minCols[t],.daas.summary.runningCols[t])!((^),/:(((.daas.summary.meta .daas.summary.minCols[t])$\:0W),'.daas.summary.minCols[t])),((^),/:((.daas.summary.meta .daas.summary.runningCols[t])$\:0),'.daas.summary.runningCols[t])];
/update counts and max/mins
tab:![tab;();0b;(.daas.cfg.rteCompositeTableFunctionMap t)!.daas.cfg.rteCompositeAggregationFunctions .daas.cfg.rteCompositeTableFunctionMap t];
/update calculations
tab:![tab;();0b;(.daas.cfg.rteCalculationTableFunctionMap t)!.daas.cfg.rteCalculationAggregationFunctions .daas.cfg.rteCalculationTableFunctionMap t];
/delete tick rows
delCols:a where (a:cols tab) like "tick*";
updTab: 0!$[count delCols;![tab;();0b;delCols];tab];


// upsert to streamTabs. return 1b to indicate an update occurred.
.daas.stream.streamTabs[id;`data]::updTab;


.log.out[.z.h;"data updated";()];


 }</code_text>
	<description></description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>t</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Symbol</datatype>
	</param>
	<param>
		<parameter>data</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Symbol</datatype>
	</param>
	<param>
		<parameter>id</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Symbol</datatype>
	</param>
	<analyticgroup>daasStream</analyticgroup>
</analytic>
