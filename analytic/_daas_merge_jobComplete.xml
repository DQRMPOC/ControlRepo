<analytic>
	<analytic>.daas.merge.jobComplete</analytic>
	<code_text>{[ID]

.log.out[.z.h;"job finished on slave";ID];

.daas.merge.logComplete[ID];


    if[first exec immediate from .daas.merge.mergeJobs where slaveID=ID;
        .log.out[.z.h;"job on slave ",string[ID]," is immediate merge";()];
        (`targetDir;`date) set' first each value exec targetDir,date from .daas.merge.mergeJobs where slaveID=ID;
        sourceDir:`$ssr[string[targetDir];"hdblog";"mergeHdblog"];
        .[.daas.merge.moveToMain;(targetDir;sourceDir;date);
            {.log.out[.z.h;"ERROR when running immediate merge.";()];
            if[.handles.blocked;.daas.processing.unlockHDB[.handles.hdbs];hclose each .handles.hdbs];
            }];
        if[first exec copy from .daas.merge.mergeJobs where slaveID=ID;
            /Copy data to the other side if FT system
            .[.daas.merge.copyToRemote;(last "hdblog" vs targetDir;date);{.log.out[.z.h;"failed to copy to remote";x]}];
            ];
        /immediate job
        thisJob:first select from .daas.merge.mergeJobs where slaveID=ID;
        update merged:1b from `.daas.merge.completed where jobID=thisJob`jobID;
        /eod jobs with same date and targetDir will be merged at same time
        otherMergedJobs:exec jobID from .daas.merge.completed where partitionDate=thisJob`date, target=thisJob`targetDir, time&lt;=thisJob`jobAddTime;
        update merged:1b from `.daas.merge.completed where jobID in otherMergedJobs;
        @[.daas.merge.clearCompleted;::;{.log.out[.z.h;"error clearing files for completed job";()]}];
        ];  


.log.out[.z.h;"deleting job for";ID];
delete from `.daas.merge.mergeJobs where slaveID=ID;
.daas.merge.completeStatus[ID];



.log.out[.z.h;"checking queue for any jobs for slave";()];
readyJobs:.daas.merge.checkQueue[];


/if there is overlap on current jobs then there may be no jobs
if[not count readyJobs;
 	.log.out[.z.h;"sending slave shutdown message";ID];
	neg[.z.w](`.daas.merge.shutdownSlave;::);
	:();
 	];
 	

newJobID:first exec jobID from readyJobs;

update state:`initalising,slaveID:ID from `.daas.merge.mergeJobs where jobID=newJobID;
.daas.merge.initaliseStatus[newJobID];

job:select from .daas.merge.mergeJobs where slaveID=ID;

/push the job to the slave
.log.out[.z.h;"sending new job to slave";job]; 
neg[.z.w](`.daas.merge.startMergeJob;job)


 }</code_text>
	<description></description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>ID</parameter>
		<default></default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Symbol</datatype>
	</param>
	<analyticgroup>daasMerge</analyticgroup>
</analytic>
