<analytic>
	<analytic>.daas.stream.checkParams</analytic>
	<code_text>{[params]
han:"i"$(get params[`handle]);
reason:"";
if[(type get (string[params[`start]]))=-16;reason:"Subscription not valid:start time given as wrong type";:1b];
if[(type get (string[params[`end]]))=-16;reason:"Subscription not valid:end time given as wrong type";:1b];
if[params[`start]&gt;=params[`end];reason:"Subscription not valid:start time must be before end time";:1b];
if[(count params[`symlist])&gt;1;reason:"Subscription not valid:only one symbol can be sent";:1b];
if[not all  (key params) in `assetClass`analytics`symList`start`end`applyFilter`handle;reason:"Subscription not valid:non-valid parameter specified";:1b];
if[params[`symList]~`;reason:"Subscription not valid:symbol not specified";:1b]; 
if[.z.N&lt;("n"$get (string[params[`start]]));reason:"Stream hasn't started yet will receive update when stream start";:0b];
if[.z.N&gt;("n"$get (string[params[`end]]));reason:"Stream has finished, will only show one update";:0b];
if[not reason~"";.trep.accept[han];.trep.publishFlat[han;([]ERROR:(enlist reason))]];
 :0b
 }
 </code_text>
	<description>parameter checker for streaming requests</description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>params</parameter>
		<default>
			<dictkey>
				<name>Key</name>
				<datatype>Symbol</datatype>
				<default></default>
				<isrequired>true</isrequired>
				<description></description>
			</dictkey>
		</default>
		<description>default parameter</description>
		<required>1</required>
		<datatype>Dict</datatype>
	</param>
	<analyticgroup>daasStream</analyticgroup>
</analytic>
