<analytic>
	<analytic>.daas.util.calendarOpenClose</analytic>
	<code_text>{[params;res]

	dateCol:(.daas.cfg.secMasterWhereClause[params`dataType])`dateCol;
	venueID:.daas.cfg.secMasterIdentifierMap[params[`identifier]];
	
	r:.daas.util.calendarValidCheck[params;res;1b];
	params:r[0];
	res:r[1];
	open:r[2];
	
	
	$[99=type open;
		[
		//Select all open/close events for each MIC based on most recent validFrom values
		wc:((or;(like;`event;"*[oO]pen*");(like;`event;"*[cC]lose*"));(&lt;=;dateCol;params[`date]));
		wc,:(=;dateCol;(fby;(enlist;max;dateCol);(+:;(!;enlist(venueID;`event);(enlist;venueID;`event)))));		
		oc:?[res;wc;venueID;(asc;`time)];
		
		//Exception for venues with multiple opens/closes
		if[count moc:where (count each oc)&gt;2;
			oc[moc]:2 cut raze {(enlist x where not (til count x) mod 2;enlist x where (til count x) mod 2)}each oc moc];
			
		oc:oc,'params[`date],'key oc;
		
		r:{([]MIC:x[;3];date:x[;2];open:raze min(x[;0];x[;1]);close:raze max(x[;0];x[;1]))} oc where 1b in/: open;
		
		//Adjust result if given date is an open holiday
		//if[count oc where 1b in/: open;
		if[any (where 1b in/: open) in ?[res;((in;venueID;enlist key oc);(`holiday);(=;dateCol;params`date));();venueID];
			r:update close:?[res;((=;`status;enlist`open);(=;dateCol;params[`date]));();`time] from r where MIC in ?[res;((=;`status;enlist`open);(=;dateCol;params[`date]));();venueID]];
		
		//Add null rows for venues which are closed
		r:r,{([]MIC:x[;3];date:x[;2];open:l#0Nt;close:(l:count x)#0Nt)}oc where not 1b in/: open;
		:r];
	
	
	
		:([]MIC:?[res;();();(distinct;venueID)];date:l#params[`date];open:l#0Nt;close:(l:count ?[res;();();(distinct;venueID)])#0Nt)
	]
 }</code_text>
	<description>Returns a table with the open and close times for a given venue on a given date</description>
	<dictionaryparams>0</dictionaryparams>
	<typ>Analytic</typ>
	<private>0</private>
	<returntype></returntype>
	<returndata></returndata>
	<defaultconnection></defaultconnection>
	<alias></alias>
	<analytictype>polling</analytictype>
	<returndescription></returndescription>
	<param>
		<parameter>params</parameter>
		<default>
			<dictkey>
				<name>Key</name>
				<datatype>Symbol</datatype>
				<default></default>
				<isrequired>true</isrequired>
				<description></description>
			</dictkey>
		</default>
		<description>getRef params</description>
		<required>1</required>
		<datatype>Dict</datatype>
	</param>
	<param>
		<parameter>res</parameter>
		<default></default>
		<description>Result from select performed earlier in getRef</description>
		<required>1</required>
		<datatype>Table</datatype>
	</param>
	<analyticgroup>daasUtil</analyticgroup>
</analytic>
